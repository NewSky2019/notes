1. wrong answer

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        leftBoundary=0
        rightBoundary=len(nums)-1
        
        while rightBoundary-leftBoundary+1>0:
            mid=leftBoundary+(rightBoundary-leftBoundary)//2
            if nums[mid]==target:
                return mid
            else:
                if nums[mid]>=nums[leftBoundary]:
                    if target>=nums[leftBoundary] and target<=nums[mid-1]:
                        rightBoundary=mid-1
                    else:
                        leftBoundary=mid+1
                        
                else:
                    if target>=nums[mid+1] and target<=nums[rightBoundary]:
                        leftBoundary=mid+1
                    else:
                        rightBoundary=mid-1
                        
        return -1
        
        
        
nums=[1,3]
target=3



2.

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        
        leftBoundary=0
        rightBoundary=len(nums)-1
        
        while rightBoundary-leftBoundary+1>0:
            mid=leftBoundary+(rightBoundary-leftBoundary)//2
            if nums[mid]==target:
                return mid
            else:
                if nums[mid]>nums[leftBoundary]:
                    if target>=nums[leftBoundary] and target<=nums[mid-1]:
                        rightBoundary=mid-1
                    else:
                        leftBoundary=mid+1
                        
                elif nums[mid]<nums[leftBoundary]:
                    if target>=nums[mid+1] and target<=nums[rightBoundary]:
                        leftBoundary=mid+1
                    else:
                        rightBoundary=mid-1
                        
        return -1
        
        
      
nums=[4,5,6,7,0,1,2]
target=3
