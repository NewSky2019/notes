# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class BSTIterator(object):
    
    def __init__(self):
        self.elements=[]
        self.currentPos=0
        self.inOrder(root)

    def __init__(self, root):
        """
        :type root: TreeNode
        """
        
        

    def next(self):
        """
        @return the next smallest number
        :rtype: int
        """
        result=self.elements[self.currentPos]
        self.currentPos=self.currentPos+1
        return result
    
        

    def hasNext(self):
        """
        @return whether we have a next smallest number
        :rtype: bool
        """
        return currentPos<=len(self.elements)-1
    
    def inOrder(self,root):
        if root==None:
            return
        self.inOrder(root.left)
        self.elements.append(root.val)
        self.inOrder(root.right)
        


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
