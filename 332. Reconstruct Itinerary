1. forgot the break

class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        tickets=sorted(tickets,key=lambda x: x[1])
        
        numUsed=0
        result=[]
        
        for i in tickets:
            if i[0]=="JFK":
                break
                
        currentStation=i
        
        while numUsed<len(tickets):
            
            numUsed=numUsed+1
            result.append(currentStation[0])
            
            for j in tickets:
                if j[0]==currentStation[1]:
                    currentStation=j
                    #here, forgot to all the break, we want to find the first one satisfy the requirement,so if found, must use break to stop
                    
                    
        return result
                    
            
     
Input
[["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]
Output
["JFK","SFO","SFO","SFO"]
Expected
["JFK","MUC","LHR","SFO","SJC"]



2. for the last station, you need to add its destination to the result

class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        tickets=sorted(tickets,key=lambda x: x[1])
        
        numUsed=0
        result=[]
        
        for i in tickets:
            if i[0]=="JFK":
                break
                
        currentStation=i
        
        while numUsed<len(tickets):
            
            numUsed=numUsed+1
            result.append(currentStation[0])
            
            for j in tickets:
                if j[0]==currentStation[1]:
                    currentStation=j
                    break
                    
        
                    
                    
        return result
                    
            
            
Input
[["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]
Output
["JFK","MUC","LHR","SFO"]
Expected
["JFK","MUC","LHR","SFO","SJC"]
        
        
        
        
     
     
     
     
3. use same  station more than once, formulate a local loop

class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        tickets=sorted(tickets,key=lambda x: x[1])
        
        numUsed=0
        result=[]
        
        for i in tickets:
            if i[0]=="JFK":
                break
                
        currentStation=i
        
        while numUsed<len(tickets):
            
            numUsed=numUsed+1
            result.append(currentStation[0])
            
            for j in tickets:
                if j[0]==currentStation[1]:
                    currentStation=j
                    break
                    
        result.append(currentStation[1])
                 
        return result
                    
            
        
        
        
Input
[["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output
["JFK","ATL","JFK","ATL","JFK","JFK"]
Expected
["JFK","ATL","JFK","SFO","ATL","SFO"]






4. start from the JFK with smallest lexical order cannot format the itneray.

def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        tickets=sorted(tickets,key=lambda x: x[1])
        
        
        
        numUsed=0
        result=[]
        
        for i in tickets:
            if i[0]=="JFK":
                break
                
        currentStation=i
        theDict={}
        
        while numUsed<len(tickets):
            
            numUsed=numUsed+1
            result.append(currentStation[0])
            theDict[tuple(currentStation)]=1
            
            for j in tickets:
                if j[0]==currentStation[1] and tuple(j) not in theDict:
                    currentStation=j
                    break
                    
        result.append(currentStation[1])
                 
        return result
                    
                    
                  
                  
Input
[["JFK","KUL"],["JFK","NRT"],["NRT","JFK"]]
Output
["JFK","JFK","JFK","KUL"]
Expected
["JFK","NRT","JFK","KUL"]
