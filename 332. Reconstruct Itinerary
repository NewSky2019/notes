1. may have multiple same tickets, so you cannot use dictionary, and may visit same stations more than once

def findItinerary(tickets):
    """
    :type tickets: List[List[str]]
    :rtype: List[str]
    """
    starts = []
    for i in tickets:
        if i[0] == "JFK":
            starts.append(i[:])


    itineries = []

    for start in starts:

        traceBehind = []
        if start[1]=="ANU":
            itinerariesFromThisStart = dfsVisit(start, tickets, traceBehind)
            for iti in itinerariesFromThisStart:
                print(iti)



        itinerariesFromThisStart = dfsVisit(start, tickets, traceBehind)



        for j in itinerariesFromThisStart:
            itineries.append(j)

    maxL=0
    maxOne=None
    for i in itineries:
        if len(i)>maxL:
            maxL=len(i)
            maxOne=i

    print(maxOne)





def dfsVisit(station, tickets, traceBehind):

    itinerariesFromThisStation = []

    nextStations = []

    for i in tickets:
        if i not in traceBehind and i[0] == station[1]:
            nextStations.append(i)




    if nextStations == []:

        return [station]

    for i in nextStations:

        itsTraceBehind = traceBehind[:]
        itsTraceBehind.append(station)

        itinerariesFromIt = dfsVisit(i, tickets, itsTraceBehind)

        for s in itinerariesFromIt:
            j=s[:]
            j.insert(0, station[0])
            itinerariesFromThisStation.append(j)

    return itinerariesFromThisStation



tickets=[["EZE","AXA"],["TIA","ANU"],["ANU","JFK"],["JFK","ANU"],["ANU","EZE"],["TIA","ANU"],["AXA","TIA"],["TIA","JFK"],["ANU","TIA"],["JFK","TIA"]]




findItinerary(tickets)





1 station changes in wrong way

def findItinerary(tickets):
    """
    :type tickets: List[List[str]]
    :rtype: List[str]
    """
    starts = []
    for i in tickets:
        if i[0] == "JFK":
            starts.append(i[:])

    itineries = []

    for start in starts:

        traceBehind = []
        itinerariesFromThisStart = dfsVisit(start, tickets, traceBehind)
        #print("itinerariesFromThisStart is ",itinerariesFromThisStart)


        for j in itinerariesFromThisStart:
            itineries.append(j)

    print(itineries)



def dfsVisit(station, tickets, traceBehind):
    print("station is ",station)
    itinerariesFromThisStation = []

    nextStations = []

    for i in tickets:
        if i not in traceBehind and i[0] == station[1]:
            nextStations.append(i)

    #print("station and next stations is ",station, nextStations)

    if nextStations == []:
        return [station]

    for i in nextStations:
        itsTraceBehind = traceBehind[:]
        itsTraceBehind.append(station)

        itinerariesFromIt = dfsVisit(i, tickets, itsTraceBehind)

        for j in itinerariesFromIt:
            j.insert(0, station[0])
            itinerariesFromThisStation.append(j)

    return itinerariesFromThisStation



tickets=[["JFK","ATL"],["ATL","JFK"],["JFK","SFO"],["SFO","ATL"],["ATL","SFO"]]
findItinerary(tickets)










1. why starts changes

def findItinerary(tickets):
    """
    :type tickets: List[List[str]]
    :rtype: List[str]
    """
    starts = []
    for i in tickets:
        if i[0] == "JFK":
            starts.append(i) #changes to starts.append(i[:])

    itineries = []

    for i in starts:
        print("here starts is ",starts)

        traceBehind = []
        itinerariesFromThisStart = dfsVisit(i, tickets, traceBehind)
        print("and here starts is ", starts)

        for j in itinerariesFromThisStart:
            itineries.append(j)



def dfsVisit(station, tickets, traceBehind):
    itinerariesFromThisStation = []

    nextStations = []

    for i in tickets:
        if i not in traceBehind and i[0] == station[1]:
            nextStations.append(i)

    if nextStations == []:
        return [station]

    for i in nextStations:
        itsTraceBehind = traceBehind[:]
        itsTraceBehind.append(station)

        itinerariesFromIt = dfsVisit(i, tickets, itsTraceBehind)

        for j in itinerariesFromIt:
            j.insert(0, station[0])
            itinerariesFromThisStation.append(j)

    return itinerariesFromThisStation


tickets=[["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
findItinerary(tickets)




1.
itinerariesFromIt=self.dfsVisit(i,tickets,itsTraceBehind)
            for j in itinerariesFromIt:
                j=j.insert(0,station)
                itinerariesFromThisStation.append(j)
                
 

j=["jdj"]
station="yuew"
j = j.insert(0, station)
print(j)

result is None, insert return nothing


1.wrong: list object has no attribute copy

itsTraceBehind=traceBehind.copy()



1. forgot the break

class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        tickets=sorted(tickets,key=lambda x: x[1])
        
        numUsed=0
        result=[]
        
        for i in tickets:
            if i[0]=="JFK":
                break
                
        currentStation=i
        
        while numUsed<len(tickets):
            
            numUsed=numUsed+1
            result.append(currentStation[0])
            
            for j in tickets:
                if j[0]==currentStation[1]:
                    currentStation=j
                    #here, forgot to all the break, we want to find the first one satisfy the requirement,so if found, must use break to stop
                    
                    
        return result
                    
            
     
Input
[["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]
Output
["JFK","SFO","SFO","SFO"]
Expected
["JFK","MUC","LHR","SFO","SJC"]



2. for the last station, you need to add its destination to the result

class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        tickets=sorted(tickets,key=lambda x: x[1])
        
        numUsed=0
        result=[]
        
        for i in tickets:
            if i[0]=="JFK":
                break
                
        currentStation=i
        
        while numUsed<len(tickets):
            
            numUsed=numUsed+1
            result.append(currentStation[0])
            
            for j in tickets:
                if j[0]==currentStation[1]:
                    currentStation=j
                    break
                    
        
                    
                    
        return result
                    
            
            
Input
[["MUC","LHR"],["JFK","MUC"],["SFO","SJC"],["LHR","SFO"]]
Output
["JFK","MUC","LHR","SFO"]
Expected
["JFK","MUC","LHR","SFO","SJC"]
        
        
        
        
     
     
     
     
3. use same  station more than once, formulate a local loop

class Solution(object):
    def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        tickets=sorted(tickets,key=lambda x: x[1])
        
        numUsed=0
        result=[]
        
        for i in tickets:
            if i[0]=="JFK":
                break
                
        currentStation=i
        
        while numUsed<len(tickets):
            
            numUsed=numUsed+1
            result.append(currentStation[0])
            
            for j in tickets:
                if j[0]==currentStation[1]:
                    currentStation=j
                    break
                    
        result.append(currentStation[1])
                 
        return result
                    
            
        
        
        
Input
[["JFK","SFO"],["JFK","ATL"],["SFO","ATL"],["ATL","JFK"],["ATL","SFO"]]
Output
["JFK","ATL","JFK","ATL","JFK","JFK"]
Expected
["JFK","ATL","JFK","SFO","ATL","SFO"]






4. start from the JFK with smallest lexical order cannot format the itneray.

def findItinerary(self, tickets):
        """
        :type tickets: List[List[str]]
        :rtype: List[str]
        """
        tickets=sorted(tickets,key=lambda x: x[1])
        
        
        
        numUsed=0
        result=[]
        
        for i in tickets:
            if i[0]=="JFK":
                break
                
        currentStation=i
        theDict={}
        
        while numUsed<len(tickets):
            
            numUsed=numUsed+1
            result.append(currentStation[0])
            theDict[tuple(currentStation)]=1
            
            for j in tickets:
                if j[0]==currentStation[1] and tuple(j) not in theDict:
                    currentStation=j
                    break
                    
        result.append(currentStation[1])
                 
        return result
                    
                    
                  
                  
Input
[["JFK","KUL"],["JFK","NRT"],["NRT","JFK"]]
Output
["JFK","JFK","JFK","KUL"]
Expected
["JFK","NRT","JFK","KUL"]
